const env = process.env.NODE_ENV;
const ExtractTextPlugin = require('extract-text-webpack-plugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const path = require('path');
const StaticSiteGeneratorPlugin = require('static-site-generator-webpack-plugin');
const webpack = require('webpack');

const publicPath = 'static';

module.exports = {
  devtool: 'cheap-module-eval-source-map',
  entry: {
    main: './app/index.js',
  },
  output: {
    path: path.join(__dirname, 'dist'),
    filename: `${publicPath}/bundle.js`,
    /* IMPORTANT!
     * You must compile to UMD or CommonJS
     * so it can be required in a Node context: */
    libraryTarget: 'umd',
  },
  resolve: {
    extensions: ['.js'],
    modules: [
      path.resolve('./app'),
      'node_modules',
    ],
  },
  module: {
    rules: [
      {
        test: /\.js$/,
        use: 'babel-loader',
        include: path.join(__dirname, 'app'),
      },
      {
        test: /\.css$/,
        use: ExtractTextPlugin.extract({
          fallbackLoader: 'style-loader',
          loader: [
            {
              loader: 'css-loader',
              options: {
                importLoaders: 1,
                modules: true,
                localIdentName: '[name]__[local]--[hash:base64:5]',
              },
            },
            {
              loader: 'postcss-loader',
              options: {
                plugins: () => [
                  require('postcss-cssnext'),
                ],
              },
            },
          ],
        }),
      },
    ],
  },
  plugins: [
    new webpack.optimize.OccurrenceOrderPlugin(true),
    new webpack.DefinePlugin({
      'process.env.NODE_ENV': JSON.stringify(env),
    }),
    new ExtractTextPlugin(`${publicPath}/main.css`),
  ],
};

if (env === 'production') {
  delete module.exports.devtool;
  module.exports.plugins.push(
    new webpack.optimize.UglifyJsPlugin({
      sourceMap: false,
      compress: {
        dead_code: true,
        pure_getters: true,
        unsafe: true,
        unsafe_comps: true,
        screw_ie8: true,
        warnings: false,
      },
    })
  );

  module.exports.plugins.push(
    new webpack.LoaderOptionsPlugin({
      minimize: true,
      debug: false,
    })
  );

  module.exports.plugins.push(
    new HtmlWebpackPlugin({
      template: './app/index.html', // Move the index.html file...
      minify: { // Minifying it while it is parsed
        removeComments: true,
        collapseWhitespace: true,
        removeRedundantAttributes: true,
        useShortDoctype: true,
        removeEmptyAttributes: true,
        removeStyleLinkTypeAttributes: true,
        keepClosingSlash: true,
        minifyJS: true,
        minifyCSS: true,
        minifyURLs: true,
      },
      inject: true, // inject all files that are generated by webpack, e.g. bundle.js, main.css with the correct HTML tags
    })
  );

  module.exports.plugins.push(
    new StaticSiteGeneratorPlugin('main', [
      '/index.html',
    ], {})
  );
  // If app is in development
} else {
  module.exports.plugins.push(
    new HtmlWebpackPlugin({
      template: './app/index.html',
      inject: true,
    })
  );
}
